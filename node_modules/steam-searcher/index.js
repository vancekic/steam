//Made by Mitchell Reiff/MAPReiff

var request = require('request')
var fs = require('fs')

function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
};

function FireGeneralRequest(timeout, reqUrl, callback) {
    request.get({
        url: reqUrl,
        timeout: timeout
    }, function (err, res, body) {

        if (err) return callback(err);
        if (res.statusCode !== 200) return callback(new Error('request failed (' + res.statusCode + ')'));
        if (!body) return callback(new Error('failed to get body content'));

        if (!isJson(body)) {
            fs.open('./index.html', 'w', (err, fd) => {
                if (err) throw err;
                fs.write(fd, body, function(err) {
                    if (err) throw err;
                    console.log('Steam request has been stored as html successfully!')
                })
            })
        } else {
            // Parse body
            var res1 = JSON.parse(body),
            aggData = [],
            // for each item found, throw up a request to get them all
            count = res1.items.length;
            console.log('Parsing ' + count + ' games found...')
            res1.items.forEach(function(element) {
                var steamID = element.id,
                reqUrlGame = `http://store.steampowered.com/api/appdetails?appids=${steamID}`
                console.log('Processing ' + element.name + '...')
                request.get({
                        url: reqUrlGame,
                        timeout: timeout
                    }, function (err, res, body) {
                        if (err) return callback(err);
                        if (res.statusCode !== 200) return callback(new Error('request failed (' + res.statusCode + ')'));
                        if (!body) return callback(new Error('failed to get body content'));
        
                        var gameData = JSON.parse(body)
                        console.log('Pushing ' + gameData[steamID].data.name);
                        aggData.concat(aggData.push(gameData[steamID].data))
                        
                        if (aggData.length === count) {
                            console.log('Operation terminated with SUCCESS.')
                            return callback(null, aggData);
                        }
                    }
                )
            })
        }
    })
};

// Init the module
function find(game, callback) {
    if (typeof callback !== 'function')
        callback = function callback(err, result) {
            return err || result;
        };

    if (!game || typeof game !== 'object')
        return callback('invalid game');

    if (!game.search)
        return callback('missing search input');

    var timeout = 1000,
        search = game.search,
//        reqUrl = `http://store.steampowered.com/api/storesearch/?term={${search}}&l=english&cc=US`;
        reqUrl = `https://store.steampowered.com/search/?sort_by=Released_DESC&tags=9&category1=998`;

    return FireGeneralRequest(timeout, reqUrl, callback);
};

function findGenre(genre, callback) {
    var timeout = 1000,
    genre = genre.search,
    reqUrl = `https://store.steampowered.com/tags/en/${genre}#p=0&tab=ComingSoon`;

    return FireGeneralRequest(timeout, reqUrl, callback);
};

module.exports.find = find;
module.exports.findGenre = findGenre;